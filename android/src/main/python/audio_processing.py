import numpy as np
from scipy.signal import hilbert, find_peaks, resample_poly
from scipy import signal
from skimage.transform import resize
from scipy.io import wavfile
import time
import pywt
from statsmodels.tsa.stattools import acf
from scipy.io.wavfile import read, write
from os.path import dirname, join
#import tensorflow as tf
import tflite_runtime.interpreter as tflite

# Write scalogram to npy files
import os
from os.path import join



########################################################################
resampleSignal = None
resample_fs = 4000
########################################################################

########################################################################
########################### Signal Resampling ##########################
antialiasing_48K_coefficient = [
    -0.000528918036421,3.905917945329e-05,5.155717628997e-05, 7.20459085512e-05,
    9.927824130789e-05,0.0001317440764452,0.0001676707784537,0.0002050842330241,
    0.000241872903212,0.0002758808208721,0.0003050038504652,0.0003272998718672,
    0.0003410952702454,0.0003450881165882,0.0003384341621012,0.0003208151482794,
    0.0002924807849818,0.0002542634952921,0.0002075599194656,0.0001542798118794,
    9.676204959868e-05,3.766230755631e-05,-2.018333771016e-05,-7.391204196104e-05,
    -0.0001207966043423,-0.000158407061391,-0.0001847603289176,-0.0001984495362152,
    -0.0001987429410089,-0.0001856471448654,-0.000159926217698,-0.0001230777012674,
    -7.726257172766e-05,-2.519887158715e-05,2.998235616846e-05,8.490372309274e-05,
    0.000136134441655,0.0001803827478773,0.0002146995369905, 0.000236649623434,
    0.0002446748604919,0.0002368026473277,0.0002152571643415,0.0001793181783059,
    0.0001311187964488,7.336386158741e-05,9.361788615376e-06,-5.712632300891e-05,
    -0.0001220750851663,-0.0001814361760532,-0.0002313814628164,-0.0002685501580072,
    -0.0002902678289126,-0.0002947330497056,-0.0002811520319986,-0.0002498189721905,
    -0.0002021303496634,-0.0001405334991939,-6.84068953659e-05,1.011965761907e-05,
    9.039728898886e-05, 0.000167528781281,0.0002366637906584,0.0002933004668104,
    0.0003335746744016,0.0003545181516929,0.0003542681943243,0.0003322155787304,
    0.0002890782085376,0.0002268952448782,0.0001489376702864,5.954255120383e-05,
    -3.612386179594e-05,-0.0001323572461768,-0.0002232516122622,-0.0003030548952484,
    -0.0003665319166977,-0.0004092984723216,-0.0004281240807433,-0.0004211589289803,
    -0.0003881206175159,-0.0003301974017572,-0.0002506531418853,-0.0001531765896029,
    -4.358973443244e-05,7.171400342935e-05, 0.000185817964585,0.0002916819949762,
    0.0003825601871029,0.0004524429034467,0.0004964455770861,0.0005111468946745,
    0.0004948358294456,0.0004476655496911,0.0003716931996672,0.0002708075218629,
    0.0001505383680483,1.776117385942e-05,-0.0001196915745904,-0.0002534867388617,
    -0.0003752911789207,-0.0004772856304137,-0.0005526618723373,-0.0005960704265162,
    -0.0006039898251294,-0.0005749924682741,-0.0005098879723436,-0.0004117324923925,
    -0.0002856985872399,-0.0001388117195013,2.043509316289e-05,0.0001825648468825,
    0.0003376750119576,0.0004760354370638,0.0005886953574386,0.0006680547872083,
    0.0007083713336593,0.0007061587065953,0.0006604652585611,0.0005729916717904,
    0.0004480650340611,0.0002923957235014,0.0001148685657048,-7.43759980426e-05,
    -0.0002637281046877,-0.0004416332060088,-0.0005968666049994,-0.0007193041539117,
    -0.0008005755847811,-0.0008346471660783,-0.0008182411915249,-0.0007511101410366,
    -0.0006361216152067,-0.0004791626510588,-0.000288850791189,-7.60731548495e-05,
    0.0001466301000918,0.0003657969075742,0.0005678508365918,0.0007399337414427,
    0.0008707165074574,0.0009511350205829,0.0009750052456563,0.0009394747074433,
    0.0008452796202649,0.0006967870694256,0.0005018144895752,0.0002712322053547,
    1.836755536432e-05,-0.0002417558411295,-0.0004933022784237,-0.0007205785595358,
    -0.0009090054652269,-0.001046042965425,-0.001122014333372,-0.001130769493041,
    -0.001070150321956,-0.0009422166022492,-0.0007532250311059,-0.0005133392431978,
    -0.0002361040804736,6.232439668082e-05,0.0003640602894686,0.0006506818293229,
    0.0009040282615116, 0.001107837526645, 0.001248344969444, 0.001315374970033,
    0.001303032821374, 0.001210184847631, 0.001040620398473,0.0008029434058418,
    0.0005101536863844, 0.000178957501313,-0.0001711747859403,-0.0005191396699341,
    -0.0008434628120752,-0.001123610307551,-0.001341275651566,-0.001481558990805,
    -0.001533967081701,-0.001493164523591,-0.001359425910952,-0.001138752675275,
    -0.0008426412453896,-0.0004875077282835,-9.379624391189e-05,0.0003151819115218,
    0.0007146135028182, 0.001079672991376, 0.001387049763766, 0.001616418659306,
    0.001751764075807, 0.001782468784178, 0.001704098225166, 0.001518820803608,
    0.001235436679407,0.0008689963537764,0.0004400311798359,-2.657999505052e-05,
    -0.000503028545507,-0.0009602216197217,-0.001369515537631, -0.00170454269291,
    -0.001942763799178,-0.002067211258637,-0.002067312176741,-0.001939962747642,
    -0.001689814137768,-0.001329197627996,-0.0008775356133156,-0.0003603439534614,
    0.0001921872787848,0.0007469253738122, 0.001269760741908,  0.00172767511243,
    0.002090798838241,  0.00233432333899,  0.00244015569731, 0.002398202001812,
    0.002207194815967, 0.001874998741839, 0.001418365344504,0.0008621368917777,
    0.0002379349187932,-0.0004176012033038, -0.00106492929794,-0.001663952966211,
    -0.00217646629368,-0.002568547603272,  -0.0028127560033,-0.002889989625524,
    -0.002790884377442,-0.002516652953406,-0.002079301972403,-0.001501194064802,
    -0.0008139686377666,-5.686207942503e-05,0.0007254791904009, 0.001485583250706,
    0.002175973203201, 0.002752078485793, 0.003175035883518, 0.003414262944118,
    0.003449515699491, 0.003272548577782, 0.002887750786239, 0.002312526735273,
    0.001576449193496,0.0007198804937488,-0.0002081862206222,-0.001152825812631,
    -0.002056362351875, -0.00286179803038,-0.003516317479254,-0.003974638380406,
    -0.004202017154894,-0.004176708124363,-0.003891718517857,-0.003355723838891,
    -0.002593066656311,-0.001642806193776,-0.0005568490383667,0.0006027596782751,
    0.001767248671355, 0.002865057220549, 0.003826076866826, 0.004585955107583,
    0.005090206277058, 0.005297877844955, 0.005184538746757,  0.00474438657577,
    0.003991318788862, 0.002958865798581, 0.001698951783598,0.0002795094097108,
    -0.001218950197346,-0.002707655249393,-0.004094551178208,-0.005289679970538,
    -0.006210651149997,-0.006787905923322,-0.006969439330819,-0.006724716357188,
    -0.006047454144726,-0.004957199294468,-0.003499306823782,-0.001743738039227,
    0.000218049143233, 0.002277235366231,   0.0043131526832, 0.006199660085346,
    0.007812199291031, 0.009035079228314,  0.00976864530169, 0.009935911618439,
    0.009488291624448, 0.008410064952551,  0.00672129642824, 0.004478979685198,
    0.001776279558605,-0.001260167403044,-0.004474826386672,-0.007689550708518,
    -0.01071131946951, -0.01334108486355, -0.01538331690218,  -0.0166557883949,
    -0.01699911673097, -0.01628557832314, -0.01442673574011, -0.01137946509183,
    -0.007150044036003,-0.001796046625867, 0.004574102167192,  0.01180395195772,
    0.01969414821299,  0.02800965790094,  0.03648879193782,  0.04485363866789,
    0.05282143278994,  0.06011635305402,  0.06648118520518,  0.07168832735824,
    0.07554958246219,   0.0779243545664,  0.07872572343143,   0.0779243545664,
    0.07554958246219,  0.07168832735824,  0.06648118520518,  0.06011635305402,
    0.05282143278994,  0.04485363866789,  0.03648879193782,  0.02800965790094,
    0.01969414821299,  0.01180395195772, 0.004574102167192,-0.001796046625867,
    -0.007150044036003, -0.01137946509183, -0.01442673574011, -0.01628557832314,
    -0.01699911673097,  -0.0166557883949, -0.01538331690218, -0.01334108486355,
    -0.01071131946951,-0.007689550708518,-0.004474826386672,-0.001260167403044,
    0.001776279558605, 0.004478979685198,  0.00672129642824, 0.008410064952551,
    0.009488291624448, 0.009935911618439,  0.00976864530169, 0.009035079228314,
    0.007812199291031, 0.006199660085346,   0.0043131526832, 0.002277235366231,
    0.000218049143233,-0.001743738039227,-0.003499306823782,-0.004957199294468,
    -0.006047454144726,-0.006724716357188,-0.006969439330819,-0.006787905923322,
    -0.006210651149997,-0.005289679970538,-0.004094551178208,-0.002707655249393,
    -0.001218950197346,0.0002795094097108, 0.001698951783598, 0.002958865798581,
    0.003991318788862,  0.00474438657577, 0.005184538746757, 0.005297877844955,
    0.005090206277058, 0.004585955107583, 0.003826076866826, 0.002865057220549,
    0.001767248671355,0.0006027596782751,-0.0005568490383667,-0.001642806193776,
    -0.002593066656311,-0.003355723838891,-0.003891718517857,-0.004176708124363,
    -0.004202017154894,-0.003974638380406,-0.003516317479254, -0.00286179803038,
    -0.002056362351875,-0.001152825812631,-0.0002081862206222,0.0007198804937488,
    0.001576449193496, 0.002312526735273, 0.002887750786239, 0.003272548577782,
    0.003449515699491, 0.003414262944118, 0.003175035883518, 0.002752078485793,
    0.002175973203201, 0.001485583250706,0.0007254791904009,-5.686207942503e-05,
    -0.0008139686377666,-0.001501194064802,-0.002079301972403,-0.002516652953406,
    -0.002790884377442,-0.002889989625524,  -0.0028127560033,-0.002568547603272,
    -0.00217646629368,-0.001663952966211, -0.00106492929794,-0.0004176012033038,
    0.0002379349187932,0.0008621368917777, 0.001418365344504, 0.001874998741839,
    0.002207194815967, 0.002398202001812,  0.00244015569731,  0.00233432333899,
    0.002090798838241,  0.00172767511243, 0.001269760741908,0.0007469253738122,
    0.0001921872787848,-0.0003603439534614,-0.0008775356133156,-0.001329197627996,
    -0.001689814137768,-0.001939962747642,-0.002067312176741,-0.002067211258637,
    -0.001942763799178, -0.00170454269291,-0.001369515537631,-0.0009602216197217,
    -0.000503028545507,-2.657999505052e-05,0.0004400311798359,0.0008689963537764,
    0.001235436679407, 0.001518820803608, 0.001704098225166, 0.001782468784178,
    0.001751764075807, 0.001616418659306, 0.001387049763766, 0.001079672991376,
    0.0007146135028182,0.0003151819115218,-9.379624391189e-05,-0.0004875077282835,
    -0.0008426412453896,-0.001138752675275,-0.001359425910952,-0.001493164523591,
    -0.001533967081701,-0.001481558990805,-0.001341275651566,-0.001123610307551,
    -0.0008434628120752,-0.0005191396699341,-0.0001711747859403, 0.000178957501313,
    0.0005101536863844,0.0008029434058418, 0.001040620398473, 0.001210184847631,
    0.001303032821374, 0.001315374970033, 0.001248344969444, 0.001107837526645,
    0.0009040282615116,0.0006506818293229,0.0003640602894686,6.232439668082e-05,
    -0.0002361040804736,-0.0005133392431978,-0.0007532250311059,-0.0009422166022492,
    -0.001070150321956,-0.001130769493041,-0.001122014333372,-0.001046042965425,
    -0.0009090054652269,-0.0007205785595358,-0.0004933022784237,-0.0002417558411295,
    1.836755536432e-05,0.0002712322053547,0.0005018144895752,0.0006967870694256,
    0.0008452796202649,0.0009394747074433,0.0009750052456563,0.0009511350205829,
    0.0008707165074574,0.0007399337414427,0.0005678508365918,0.0003657969075742,
    0.0001466301000918,-7.60731548495e-05,-0.000288850791189,-0.0004791626510588,
    -0.0006361216152067,-0.0007511101410366,-0.0008182411915249,-0.0008346471660783,
    -0.0008005755847811,-0.0007193041539117,-0.0005968666049994,-0.0004416332060088,
    -0.0002637281046877,-7.43759980426e-05,0.0001148685657048,0.0002923957235014,
    0.0004480650340611,0.0005729916717904,0.0006604652585611,0.0007061587065953,
    0.0007083713336593,0.0006680547872083,0.0005886953574386,0.0004760354370638,
    0.0003376750119576,0.0001825648468825,2.043509316289e-05,-0.0001388117195013,
    -0.0002856985872399,-0.0004117324923925,-0.0005098879723436,-0.0005749924682741,
    -0.0006039898251294,-0.0005960704265162,-0.0005526618723373,-0.0004772856304137,
    -0.0003752911789207,-0.0002534867388617,-0.0001196915745904,1.776117385942e-05,
    0.0001505383680483,0.0002708075218629,0.0003716931996672,0.0004476655496911,
    0.0004948358294456,0.0005111468946745,0.0004964455770861,0.0004524429034467,
    0.0003825601871029,0.0002916819949762, 0.000185817964585,7.171400342935e-05,
    -4.358973443244e-05,-0.0001531765896029,-0.0002506531418853,-0.0003301974017572,
    -0.0003881206175159,-0.0004211589289803,-0.0004281240807433,-0.0004092984723216,
    -0.0003665319166977,-0.0003030548952484,-0.0002232516122622,-0.0001323572461768,
    -3.612386179594e-05,5.954255120383e-05,0.0001489376702864,0.0002268952448782,
    0.0002890782085376,0.0003322155787304,0.0003542681943243,0.0003545181516929,
    0.0003335746744016,0.0002933004668104,0.0002366637906584, 0.000167528781281,
    9.039728898886e-05,1.011965761907e-05,-6.84068953659e-05,-0.0001405334991939,
    -0.0002021303496634,-0.0002498189721905,-0.0002811520319986,-0.0002947330497056,
    -0.0002902678289126,-0.0002685501580072,-0.0002313814628164,-0.0001814361760532,
    -0.0001220750851663,-5.712632300891e-05,9.361788615376e-06,7.336386158741e-05,
    0.0001311187964488,0.0001793181783059,0.0002152571643415,0.0002368026473277,
    0.0002446748604919, 0.000236649623434,0.0002146995369905,0.0001803827478773,
    0.000136134441655,8.490372309274e-05,2.998235616846e-05,-2.519887158715e-05,
    -7.726257172766e-05,-0.0001230777012674,-0.000159926217698,-0.0001856471448654,
    -0.0001987429410089,-0.0001984495362152,-0.0001847603289176,-0.000158407061391,
    -0.0001207966043423,-7.391204196104e-05,-2.018333771016e-05,3.766230755631e-05,
    9.676204959868e-05,0.0001542798118794,0.0002075599194656,0.0002542634952921,
    0.0002924807849818,0.0003208151482794,0.0003384341621012,0.0003450881165882,
    0.0003410952702454,0.0003272998718672,0.0003050038504652,0.0002758808208721,
    0.000241872903212,0.0002050842330241,0.0001676707784537,0.0001317440764452,
    9.927824130789e-05, 7.20459085512e-05,5.155717628997e-05,3.905917945329e-05,
    -0.000528918036421
]

resampled_4k_signal = None

def signal_resample(signal):
    # print("Signal len -  ", len(signal), type(signal[0]))
    resampled_signal = resample_poly(signal, 1, 12, axis=0, window=antialiasing_48K_coefficient)
    resampled_4k_signal = resampled_signal
    return resampled_signal

# def signal_resample(signal, original_fs, target_fs):
#     gcd = np.gcd(original_fs, target_fs)
#     up = target_fs // gcd
#     down = original_fs // gcd
#     resampled_signal=resample_poly(signal, up, down)
#     resampled_signal = np.int16(resampled_signal)
#     print(resampled_signal.shape)
#     return resampled_signal

########################################################################
##################### Fetal Heat Rate Estimation #######################

# Link to original code - https://github.com/cliffordlab/AndroidApp-RealTime-Doppler-Processing/blob/main/fhr_main.py

# Define a low-pass Butterworth filter
def butter_lowpass_filter(data, cutoff, fs, order):
    #'data': input signal to be filtered,
    # 'cutoff': cut-off frequency of the low-pass filter,
    # 'fs': sampling frequency of the input signal,
    # 'order': the order of the filter.
    # 'sos':filter coefficients.
    t = np.arange(len(data))/fs
    sos = signal.butter(order, cutoff, btype='low',fs=fs,output='sos', analog=False)
    y = signal.sosfiltfilt(sos, data) #applies the filter to the input signal
    y = np.asarray(y)

    return y

# Define a high-pass Butterworth filter
def butter_highpass_filter(data, cutoff, fs, order):
    sos = signal.butter(order, cutoff, btype='high',fs=fs,output='sos', analog=False)
    y = signal.sosfiltfilt(sos, data)
    return y

# Define a function to compute the amplitude envelope using the Hilbert transform
def hilbert_filter(x):
    analytic_signal = hilbert(x)
    cutoff=14.794675954494590
    amplitude_envelope = np.exp(butter_lowpass_filter(np.log(np.abs(analytic_signal)),cutoff,4000,2))

    return amplitude_envelope


# Define a function to compute autocorrelation
def autocorrelate(data):

    #autocor = librosa.autocorrelate(data)
    autocor = acf(data, nlags=len(data)-1)

    return autocor

def estimate_heart_rate(x, Fs):
    # print(x[:400])

    x = signal_resample(x)
    # if resampled_4k_signal is None:
    #     x = resampled_4k_signal
    Fs = 4000
    lpf = butter_lowpass_filter(x,600,Fs,4)
    hpf = butter_highpass_filter(lpf,25,Fs,4)
    r = hilbert_filter(hpf)
    corsig = autocorrelate(r)

    minPeriod = 0.287308661149887 #Lower interval to start searching peaks in the AC function (s)
    maxPeriod = 0.839140444683137 #Upper interval to start searching peaks in the AC function (s)
    min_index = round(minPeriod * Fs)
    max_index = round(maxPeriod * Fs)
    ratioFirstPeak = 0.650124394601487
    seg=corsig[min_index:max_index]
    locs, _ = find_peaks(seg, distance=(1/3)*Fs)

    peaks=seg[locs]

    if locs is not None:
        if len(peaks)>1:
            perX = (min_index+locs[0]-1)/(min_index+locs[1]-1)

            if perX>=0.48 and perX<=.52:
                index = locs[0]
            else:
                perDif = peaks[0]/peaks[1]

                if perDif<0:
                    idxMaxPk = np.argmax(peaks)
                    index = locs[idxMaxPk]
                else:
                    if perDif >= ratioFirstPeak:
                        index = locs[0]
                    else:
                        index = locs[1]
        else:
            try:
                index = locs[0]
            except:
                return 0.000

        true_index = index+min_index-1

        heartRate = 60/(true_index/Fs)
    else:
        heartRate = float('nan')
    return heartRate


########################################################################
##################### Quality classification Code ######################

# Original Code Link - https://github.com/cliffordlab/AndroidApp-RealTime-Doppler-Processing/blob/main/Deep_Learning_SQI/Model%20Evaluation/Load_Saved_Model.ipynb

def create_scalogram(sig,fs):
    scales = np.arange(1, 41)
    coeffs, _ = pywt.cwt(sig, scales, wavelet = 'morl', sampling_period=1/fs)
    f = abs(coeffs)
    f = resize(f, (40, 250), mode = 'constant')
    return f

def normalize(array):
    return (array - array.min())/(array.max() - array.min())

test = []
def quality_classification(x, Fs, filepath):
    # print(x[:100])
    # if resampled_4k_signal is None:
    #     x = resampled_4k_signal

    x = np.float32(x)
    fs = 4000
    DUS_raw = signal_resample(x) #x #

    DUS=normalize(DUS_raw)

    # npy_path = str(Python.getPlatform().getApplication().getFilesDir())
    # path_ = join(dirname(npy_path), "scelo.npy")


    f_s=create_scalogram(DUS,fs) #Creting scalogram
    # filename = join(os.environ["HOME"], "current_scalogram.npy")

    f=normalize(f_s)
    X=f.T
    X=np.expand_dims(X, axis=2)
    X=np.expand_dims(X, axis=0)

    ########### original
    input_data = X.astype(np.float32)
    # Load TFLite model and allocate tensors
    modelFilepame = join(dirname(__file__), "converted_model.tflite")

    interpreter = tflite.Interpreter(model_path=modelFilepame)
    interpreter.allocate_tensors()

    # Get input and output details
    input_details = interpreter.get_input_details()
    output_details = interpreter.get_output_details()

    # Set the input tensor
    interpreter.set_tensor(input_details[0]['index'], input_data)

    # Perform inference
    interpreter.invoke()

    # Get the output tensor
    output_data = interpreter.get_tensor(output_details[0]['index']).tolist()[0]

    test.append(np.argmax(output_data))
    # print(output_data)
    # print(test)
    # return np.argmax(output_data)
    # numpy_array = np.clip(new_x, -128, 127)
    # print(x[7500:7600])
    # print(x.shape)
    out = np.array(np.argmax(output_data), dtype = np.float32)

    if out == 0.0:
        filepath = filepath.split(".")[0] + ".npy"
        print("Filename #######", filepath)

        try:
            savedScalogram = np.load(filepath)
            # savedScalogram.extend(f)
            finalScalogram = np.append(savedScalogram, f_s)
            np.save(filepath, finalScalogram)
        except:
            np.save(filepath, f_s)
    # else:
    #     print("Model output - ", str(out))

    return out #output_data


# def gestational_age_estimation(filepath):
#     try:
#         savedScalogram = np.load(filepath)
#     except:
#         print("Error in getting the scalogram file")
#         return "error"
#
#     f=normalize(savedScalogram)
#     X=f.T
#     X=np.expand_dims(X, axis=2)
#     X=np.expand_dims(X, axis=0)
#
#     num_seg = 10
#     input_data = X.astype(np.float32)
#     # Load TFLite model and allocate tensors
#     beatEncoderModelFilepath = join(dirname(__file__), 'beat_encoder_GA.tflite') # use gestational age model tflite here
#     windowEncoderModelFilepath = join(dirname(__file__), 'window_encoder_GA.tflite')
#
#     # Load the TFLite beat encoder model
#     beat_encoder_interpreter = tflite.lite.Interpreter(model_path=beatEncoderModelFilepath)
#     beat_encoder_interpreter.allocate_tensors()
#
#     # Get input and output tensor details
#     beat_input_details = beat_encoder_interpreter.get_input_details()
#     beat_output_details = beat_encoder_interpreter.get_output_details()
#
#     # Encode each of the 10 beat segments using the beat encoder
#     encoded_beats = np.zeros((1, num_seg, 50))
#     for i in range(num_seg):
#         segment = tensor_val[:, i, :, :, :].astype(np.float32)
#         beat_encoder_interpreter.set_tensor(beat_input_details[0]['index'], segment)
#         beat_encoder_interpreter.invoke()
#         encoded_beats[:, i, :] = beat_encoder_interpreter.get_tensor(beat_output_details[0]['index'])
#
#     # Load the TFLite window encoder model
#     window_encoder_interpreter = tflite.lite.Interpreter(model_path=windowEncoderModelFilepath)
#     window_encoder_interpreter.allocate_tensors()
#
#     # Get input and output tensor details
#     window_input_details = window_encoder_interpreter.get_input_details()
#     window_output_details = window_encoder_interpreter.get_output_details()
#
#     # Set the input tensor
#     window_encoder_interpreter.set_tensor(window_input_details[0]['index'], encoded_beats.astype(np.float32))
#
#     # Run the inference
#     window_encoder_interpreter.invoke()
#
#     # Get the output tensor
#     GA_tflite = window_encoder_interpreter.get_tensor(window_output_details[0]['index'])[0]
#     print(GA_tflite)
#
#     return GA_tflite







